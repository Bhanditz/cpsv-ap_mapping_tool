<?php


function CPSVAPmapping_menu() {

	$items['CPSVAPmappings'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('CPSVAPmapping_basic'),
		'access callback' => TRUE,
	);
	
	return $items;
}

function CPSVAPmapping_basic($form, &$form_state) {
	
	$datamodel_list= CPSVAPmapping_basic_populate_list();
	$dropdown_array= CPSVAPmapping_basic_relations_list();

	
	$form = array();
	
	
	$form['datamodellist2'] = array (
					'#title' => t('Choose a datamodel to map or insert a new one'),
					'#type' => 'select',
					'#options' => $datamodel_list,
					'#default_value' => 'default',
					
				);
	
	
	
	$form['datamodel_fieldset2'] = array(
		 '#type' => 'fieldset',
	 	 '#title' => t('datamodel 2'),
	 	 '#prefix' => '<div id="datamodel-fieldset2">',
	 	 '#suffix' => '</div>',
	 	 );	  	 	 
		 
			
		  
			
			 $form['datamodel_fieldset2']['datamodel2'] = array (
		  	  		'#title' => t('Name of the second datamodel'),                                     
					'#type' => 'textfield',
					'#size' => '50',
					'#states' => array(
						'visible' => array(
						':input[name="datamodellist2"]' => array('value' => '0'),
							),
						),
					);
			 
			   $form['datamodel_fieldset2']['URI2'] = array (
							'#title' => t('URI'),
							'#type' => 'textfield',
							'#size' => '50',
							'#states' => array(
								'visible' => array(
								':input[name="datamodellist2"]' => array('value' => '0'),
									),
								),
							);
	   
	   $form['#attached']['css'] = array(
		  	  drupal_get_path('module', 'CPSVAPmapping') . '/CPSVAPmapping.css',
		);
	   
	   $form['#tree'] = TRUE;
	   $form['relations_fieldset'] = array(
	 	 '#type' => 'fieldset',
	 	 '#title' => t('CPSVAPmapping relations'),
	 	 '#prefix' => '<div id="relations-fieldset-wrapper">',
	 	 '#suffix' => '</div>',
	 	 );	
	 
	   	$form['relations_fieldset']['labels']['dummylabelprobnotgoodpractice'] = array (
		  	  		'#markup' => '<h1> </h1>',
					);
		
		  $form['relations_fieldset']['labels']['core_class_label'] = array (
		  	  		'#markup' => '<h1>Core Class</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['core_property_label'] = array (
					'#markup' => '<h1>Core Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['relation_label'] = array (
					'#markup' => '<h1>Relation</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_class_label'] = array (
					'#markup' => '<h1>Mapped Class</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_property_label'] = array (
					'#markup' => '<h1>Mapped Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_property_label'] = array (
					'#markup' => '<h1>Mapped Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['syntax_CPSVAPmapping_label'] = array (
					'#markup' => '<h1>Syntax Mapping</h1>',
					);
	
		  if (empty($form_state['num_relations'])) {
		  	  $form_state['num_relations'] =1;
		  }
		  
		  for ($i = 0; $i < $form_state['num_relations']; $i++) {

		  	  $chosen_class = CPSVAPmapping_get_class_chosen();
		  	  
		  	  $selected = isset($form_state['values']['relations_fieldset'][$i]['core_class']) ? $form_state['values']['relations_fieldset'][$i]['core_class'] : key($chosen_class);
		  	  $properties = CPSVAPmapping_get_properties_dropdown_options($selected);
		  	  
		  	   $form['relations_fieldset'][$i]['relationship_label'] = array (
		  	  		'#markup' => '<h2>Relationships:</h2>',
					);
			   
				$form['relations_fieldset'][$i]['core_class'] = array (
					'#type' => 'select',
					'#options' => $chosen_class,
					'#default_value' => $selected,
					'#ajax' => array(
						'callback' => 'CPSVAPmapping_dependent_dropdown_callback',
						'wrapper' => 'relations-fieldset-wrapper',
						),
					);
				
				$form['relations_fieldset'][$i]['core_property'] = array (
					'#type' => 'select',
					'#prefix' => '<div id="dropdown-properties-replace">',
					'#suffix' => '</div>',
					'#options' => $properties,
					'#default_value' => isset($form_state['values']['relations_fieldset'][$i]['core_property']) ? $form_state['values']['relations_fieldset'][$i]['core_property'] : '',
					);
	
  
				$form['relations_fieldset'][$i]['relation'] = array (
					'#type' => 'select',
					'#options' => $dropdown_array,
					
					);
				
				$form['relations_fieldset'][$i]['mapped_class'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					
					);
				
				$form['relations_fieldset'][$i]['mapped_property'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					);
				
				$form['relations_fieldset'][$i]['syntax_mapping'] = array (
					'#type' => 'checkbox',				
					);	
				
				$form['relations_fieldset'][$i]['uri_label'] = array (
		  	  		'#markup' => '<h2>Uri\'s: </h2>',
					);
				
				
					$form['relations_fieldset'][$i]['core_class_URI'] = array (
					'#title_display'=> 'before',
					'#type' => 'textfield',
					'#size' => '10',
					'#attributes' => array('hidden' => 'hidden'),
				     
					);
				
				$form['relations_fieldset'][$i]['core_property_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#attributes' => array('hidden' => 'hidden'),
					
					);
								
				$form['relations_fieldset'][$i]['relation_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					 '#attributes' => array('hidden' => 'hidden'),
					);
				
				$form['relations_fieldset'][$i]['mapped_class_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#states' => array(
								'readonly' => array(
								':input[name="relations_fieldset['.$i.'][known_URI]"]' => array('checked' => FALSE),
									),
								),
					);
				
				$form['relations_fieldset'][$i]['mapped_property_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#states' => array(
								'readonly' => array(
								':input[name="relations_fieldset['.$i.'][known_URI]"]' => array('checked' => FALSE),
									),
								),
					);
				
					
				$form['relations_fieldset'][$i]['labels']['known_uri'] = array (
		  	  		'#markup' => '<h3> only fill in the uri\'s if they are known </h3>',
				);
				
					$form['relations_fieldset'][$i]['line'] = array (
		  	  		'#markup' => '<div class="style1"></div>',
				);
			}
			
			$form['generate_uri'] = array(
				'#type' => 'submit',
				'#submit' => array('CPSVAPmapping_generate_uri'),
				'#value' => t('generate uri\'s'),
				
				'#ajax' => array(
					'event' => 'change',
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['add_relation'] = array(
				'#type' => 'submit',
				'#value' => t('add relation'),
				'#submit' => array('CPSVAPmapping_add_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
				  	  	
  	  	  	$form['add_5_relations'] = array(
  	  	  		'#type' => 'submit',
  	  	  		'#value' => ('+5 relations'),
  	  	  		'#submit' => array('CPSVAPmapping_add_five'),
  	  	  		'#limit_validation_errors' => array(),
  	  	  		'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_relation'] = array(
				'#type' => 'submit',
				'#value' => ('remove relation'),
				'#submit' => array('CPSVAPmapping_remove_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_five_relations'] = array(
				'#type' => 'submit',
				'#value' => ('-5 relations'),
				'#submit' => array('CPSVAPmapping_remove_five'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
  	  	  	
		   $form['submit'] = array(
			 '#type' => 'submit',
			 '#value' => t('Submit'),		
			 '#attributes' => array('onclick' => 'if(!confirm("are you sure you want to submit the mapping?")){return false;}')
			
			
			 );
		   
	return $form;
	
}

function CPSVAPmapping_add_one($form, &$form_state) {
	$form_state['num_relations']++;
	$form_state['rebuild'] = TRUE;
	
}

function CPSVAPmapping_add_five($form,&$form_state) {
	$form_state['num_relations'] += 5;
	$form_state['rebuild'] = TRUE;
}

	
function CPSVAPmapping_remove_one($form, &$form_state) {
	if($form_state['num_relations'] > 1){
		$form_state['num_relations']--;
		$form_state['rebuild'] = TRUE;
	}
		 
}

function CPSVAPmapping_remove_five($form, &$form_state) {
	if($form_state['num_relations'] > 5){
		$form_state['num_relations']-=5;
		$form_state['rebuild'] = TRUE;
	}
}



function CPSVAPmapping_generate_uri($form, &$form_state ){
	
	
	
	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	
		
	if($select2== "add new") {
		$datamodel2=$form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['datamodel2'];
		$datamodelURI2= $form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2'];
	}
	else {
		$datamodel2=$select2;
		$result2 = db_query('SELECT uri FROM datamodels WHERE name= :datamodel2', array(':datamodel2' => $datamodel2));
		$datamodelURI2= $result2->fetchField(0);
		
	}
	$root = (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . '/';

	
	for($i = 0; $i < $form_state['num_relations']; $i++){
				
	
	
		$relation_choice= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']];
	
			
		if($relation_choice=='Exact match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:exactMatch';
		if($relation_choice=='Close match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:closeMatch';
		if($relation_choice=='Narrow match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:narrowMatch';
		if($relation_choice=='Broad match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:broadMatch';
		if($relation_choice=='Related match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:relatedMatch';
		
		$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['mapped_class']);
		$testempty2 = trim($form_state['values']['relations_fieldset'][$i]['mapped_class_URI']);
	
		if(!empty($testempty1)&& empty($testempty2)){
		$mappedclassUri = $root.'mapping/'.$datamodelURI2.'/class/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['mapped_class']);
		unset($form_state['input']['relations_fieldset'][$i]['mapped_class_URI']);
	
		$form_state['input']['relations_fieldset'][$i]['mapped_class_URI'] = $mappedclassUri;	
		//$form['relations_fieldset'][$i]['mapped_class_URI']['#value']= $mappedclassUri;
		}
		
		$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['mapped_property']);
		$testempty2 = trim($form_state['values']['relations_fieldset'][$i]['mapped_property_URI']);
		
		if(!empty($testempty1)&& empty($testempty2)) {
		$mappedpropertyUri = $root.'mapping/'.$datamodelURI2.'/property/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['mapped_property']);
		unset($form_state['input']['relations_fieldset'][$i]['mapped_property_URI']);

		$form_state['input']['relations_fieldset'][$i]['mapped_property_URI'] = $mappedpropertyUri;	
		//$form['relations_fieldset'][$i]['mapped_property_URI']['#value']= $mappedpropertyUri;
		}			
	
	}
	$form_state['rebuild']= TRUE;

	
	return form_builder('form-wrapper', $form['relations_fieldset'], $form_state);
}


function CPSVAPmapping_add_more_callback($form, $form_state) {

  return $form['relations_fieldset'];
}	

function CPSVAPmapping_basic_validate($form, &$form_state){
	$foo = FALSE;
 
 
  $select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	
  if($select2== "add new"){
  	  
  	  $testempty1 = trim($form_state['values']['datamodel_fieldset2']['datamodel2']);
  	  if(empty($testempty1)){
  	  	  form_set_error('postal', t('datamodel 2 name is required.'));
 	 	 $foo= TRUE;
 	  }
 	  
 	  $testempty1 = trim($form_state['values']['datamodel_fieldset2']['URI2']);
 	  if(empty($testempty1)){
  	  	  form_set_error('postal', t('datamodel uri is required.'));
 	 	 $foo= TRUE;
 	  }
  }

	for($i = 0; $i < $form_state['num_relations']; $i++){
	
	 $testempty1 = trim($form_state['values']['relations_fieldset'][$i]['core_class']);
 	 if(empty($testempty1)) {
 	 	 form_set_error('postal', t('The Core class is required.'));
 	 	 $foo= TRUE;
 	}
 	$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['core_property']);
 	if(empty($testempty1)) {
 	 	 form_set_error('postal', t('The Core property is required.'));
 	 	 $foo= TRUE;
 	}
 	
 	$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['relation']);
 	if(empty($testempty1)) {
 	 	 form_set_error('postal', t('The relation is required.'));
 	 	 $foo= TRUE;
 	}
 	$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['mapped_class']);
 	if(empty($testempty1)) {
 	 	 form_set_error('postal', t('The mapped class is required.'));
 	 	 $foo= TRUE;
 	}
 	$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['mapped_property']);
 	if(empty($testempty1)) {
 	 	 form_set_error('postal', t('The mapped property is required.'));
 	 	 $foo= TRUE;
 	
  }
  	}
    
  	 
  if($foo==TRUE){
  	 return;
  }
}


function CPSVAPmapping_basic_submit($form, &$form_state) {
	$root = (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . '/';
	$datamodel1='CPSV-AP';
	$datamodelURI1= 'https://joinup.ec.europa.eu/asset/cpsv-ap/description';
		
	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
		
	if($select2== "add new") {
		$datamodel2=$form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['datamodel2'];
		$datamodelURI2= $form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2'];
	}
	else {
		$datamodel2=$select2;
		$result2 = db_query('SELECT uri FROM datamodels WHERE name= :datamodel2', array(':datamodel2' => $datamodel2));
		$datamodelURI2= $result2->fetchField(0);
	}
	
 for($i = 0; $i < $form_state['num_relations']; $i++){
 	 
 
 	 if(!empty($form['relations_fieldset'][$i]['core_class'])) {
 	$relation_choice= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']]; 	 
 	$coreclass= $form_state['complete form']['relations_fieldset'][$i]['core_class']['#options'][$form_state['values']['relations_fieldset'][$i]['core_class']];
 	$coreclassuri = $root.'mapping/'.$datamodelURI1.'/property/'.str_replace(' ','',$form_state['complete form']['relations_fieldset'][$i]['core_class']['#options'][$form_state['values']['relations_fieldset'][$i]['core_class']]);
 	
 	if property is none, need to be rel beztween classes
 	$coreproperty=$form_state['complete form']['relations_fieldset'][$i]['core_property']['#options'][$form_state['values']['relations_fieldset'][$i]['core_property']];	
	$corepropertyuri = $root.'mapping/'.$datamodelURI1.'/property/'.str_replace(' ','',$form_state['complete form']['relations_fieldset'][$i]['core_property']['#options'][$form_state['values']['relations_fieldset'][$i]['core_property']]);
	
	$relation= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']];
	if($relation_choice=='Exact match')
		$relationuri='skos:exactMatch';
	if($relation_choice=='Close match')
		$relationuri='skos:closeMatch';
	if($relation_choice=='Narrow match')
		$relationuri='skos:narrowMatch';
	if($relation_choice=='Broad match')
		$relationuri='skos:broadMatch';
	if($relation_choice=='Related match')
		$relationuri='skos:relatedMatch';
	$mappedclass= $form_state['values']['relations_fieldset'][$i]['mapped_class'];
	$mappedclassuri= $form_state['values']['relations_fieldset'][$i]['mapped_class_URI'];
	$mappedproperty= $form_state['values']['relations_fieldset'][$i]['mapped_property'];
	$mappedpropertyuri= $form_state['values']['relations_fieldset'][$i]['mapped_property_URI'];
	$synmap= $form_state['values']['relations_fieldset'][$i]['syntax_mapping'];
	
	db_insert('relations')
    ->fields(array(
    	
      'did1' => $datamodel1,
      'did2' => $datamodel2,
      'coreclass' =>$coreclass, 
      'coreclassuri' => $coreclassuri,
      'coreproperty' =>$coreproperty,
      'corepropertyuri' =>$corepropertyuri,
      'relation' =>$relation,
      'relationuri' =>$relationuri,
      'mappedclass' =>$mappedclass,
      'mappedclassuri' =>$mappedclassuri,
      'mappedproperty' =>  $mappedproperty,
      'mappedpropertyuri' =>  $mappedpropertyuri,
      'synmap' =>$synmap,
      ))->execute();
    }
    else {
    	drupal_set_message('CPSVAPmapping relations are not filled in correctly');
    }
 
    
    if($select2 =='add new') {
    	db_insert('datamodels')
    	->fields(array(
    		'name' =>$form_state['values']['datamodel_fieldset2']['datamodel2'],
    		'uri' =>$form_state['values']['datamodel_fieldset2']['URI2'],
    	))->execute();
    }
       
 	drupal_set_message("CPSV-AP Mapping has been submitted");	
 
 	if(easyrdf()){
 		//the $endpoint should point to the correct address
		$endpoint= 'http://52.50.205.146/sparql-graph-crud';
 		$gs = new EasyRdf_GraphStore($endpoint);
 		$graph1 = new EasyRdf_Graph();
 		
 		//datamodel definition
 		$graph1->addResource('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		$graph1->addResource('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2004/02/skos/core#Concept');
 		$graph1->add('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/2000/01/rdf-schema#label', "Core Data Model");
 		$graph1->add('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', "reusable data models that are defined, managed, promoted and maintained centrally to facilitate interoperability across different systems, applications and domains");
 		
 		//datamodel, classes & properties
 		$graph1->addResource($datamodelURI1, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://mapping.semic.eu/def#DataModel');
 		$graph1->addResource($datamodelURI2, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://mapping.semic.eu/def#DataModel');
 		$graph1->addResource($corepropertyuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		$graph1->addResource($mappedpropertyuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		$graph1->addResource($coreclassuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		$graph1->addResource($mappedclassuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		
 		//ispartof
 		
 		$graph1->addResource($coreclassuri, 'http://purl.org/dc/terms/isPartOf', $datamodelURI1);
 		$graph1->addResource($mappedclassuri, 'http://purl.org/dc/terms/isPartOf', $datamodelURI2);
 		$graph1->addResource($corepropertyuri, 'http://purl.org/dc/terms/isPartOf', $coreclassuri);
 		$graph1->addResource($mappedpropertyuri, 'http://purl.org/dc/terms/isPartOf', $mappedclassuri);
 		if($corepropertyuri == 'none'
 		$graph1->addResource($corepropertyuri,$relationuri, $mappedpropertyuri); 		
 			
 	$gs->insert($graph1, 'http://cpsv-ap_mapping.eu');
 	
 	drupal_set_message('mapping added');

 		}
	}
}

function CPSVAPmapping_basic_populate_list(){
	$databaselist= db_query('SELECT mid,name FROM datamodels') ;

	$options= array('0' => 'add new');
   	 	foreach ($databaselist as $item) {
		  	$key = $item->mid;
		  	$value = $item->name;
		  	$options[$key] = $value;
		  }
    return $options;
}
		  
function CPSVAPmapping_basic_relations_list() {
	$voc_name = 'Skos_mappingRelation';
	$myvoc = taxonomy_vocabulary_machine_name_load($voc_name);
		  
	$dropdown_source = taxonomy_get_tree($myvoc->vid);
	
	$dropdown_list = array('0' => '---none---');
		  
		  foreach ($dropdown_source as $item) {
		  	  $key = $item->tid;
		  	  $value = $item->name;
		  	  $dropdown_list[$key] = $value;
		  }
		  
	return $dropdown_list;
}

function CPSVAPmapping_basic_classes_list(){
	$classes_name = 'Classes';
	$myclasses = taxonomy_vocabulary_machine_name_load($classes_name);
		  
	$classes_source = taxonomy_get_tree($myclasses->vid);
	
	$classes_list = array('0' => '---none---');
		  
		  foreach ($classes_source as $item) {
		  	  $key = $item->tid;
		  	  $value = $item->name;
		  	  $classes_list[$key] = $value;
		  }              
		  
	return $classes_list;
}

function CPSVAPmapping_basic_properties_list($vocabulary){

	
	$classes = taxonomy_get_tree($vocabulary);

  foreach ($classes as $data) {
    $output[$data->tid] = $data->name;
  }
  
  return $output;
}


					
				
function CPSVAPmapping_dependent_dropdown_callback($form, $form_state) {
  
	
  return $form['relations_fieldset'] ;
  
}


function CPSVAPmapping_get_class_chosen() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
    array(
    t('Public Service'),
    t('Event'),
    t('Business Event'),
    t('Life Event'),
    t('Participation'),
    t('CriterionRequirement'),
    t('Evidence'),
    t('Output'),
    t('Cost'),
    t('Channel'),
    t('Period Of Time'),
    t('Rule'),
    t('Formal Framework'),
    t('Agent'),
    t('Contact Point'),
    t('Public Organisation'),
   /*   
      t('Input'),
      t('Person'),
      t('Location'),
      t('Formal Organisation'),
      t('Legal Entity'),
      t('Addres'),
         */
      
    )
  );
 }

function CPSVAPmapping_get_properties_dropdown_options($key = '') {
  $options = array(
    t('Public Service') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Description'),
        t('Identifier'),
        t('Keyword'),
        t('Language'),
        t('Processing Time'),
        t('Sector'),
        t('Type'),
        t('Status'),
        t('Is Grouped By'),
        t('Requires'),
        t('Related'),
        t('Has Criterion'),
        t('Has Competent Authority'),
        t('Service Provider'),
        t('Service User'),
        t('Has Participation'),
        t('Has Input'),
        t('Has Formal Framework'),
        t('Produces'),
        t('Follows'),
        t('Spatial'),
        t('Temporal'),
        t('Has Cost'), 
      )
    ),
    t('Event') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Description'),
        t('Type'),
        t('Related Service'),
      )
    ),
    t('Participation') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Description'),
        t('Role'),
      )
    ),
    t('CriterionRequirement') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Type'),
      )
    ),
    t('Evidence') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        t('Related Documentation'),
        t('Language'),
      )
    ),
  /*  t('Input') => drupal_map_assoc(
      array(
        t('Name'),
        t('Identifier'),
        t('Description'),
        t('Related Documentation'),
        t('Type'),
      )
    ),*/
    t('Agent') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Type'),
        t('Plays Role'),
        t('Uses'),
        t('Has Address'),
      )
    ),
    t('Contact Point') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Type'),
        t('Plays Role'),
        t('Uses'),
        t('Has Address'),
      )
    ),
 /*  t('Person') => drupal_map_assoc(
      array()
      ),*/
    t('Period Of Time') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Start date/time'),
        t('End date/time'),
        t('Opening Hours'),
        )
      ),
    t('Rule') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Description'),
        t('Language'),
        t('Name'),
        t('Implements'),
        )
      ),
    t('Formal Framework') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Description'),
        t('Status'),
        t('Language'),
        t('Subject'),
        t('Territorial Application'),
        t('Type'),
        t('Related'),
        )
      ), 
    t('The Public Organization') => drupal_map_assoc(
      array(
      	t(''),
      	t('Identifier'),
      	t('Preferred Label'),
      	t('Spatial'),
        )
      ), 
    t('Channel') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Is Owned By'),
        t('Type'),
        t('Has Contact point'),
        t('Processing Time'),
        t('Availability'),
        t('Has Cost'),
        t('Has Input'),
        )
      ), 
    t('Cost') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),      
        t('Value'),
        t('Currency'),
        t('Description'),
        t('Is Defined By'),
        )
      ), 
   /* t('Location') => drupal_map_assoc(
      array()
      ), 
    t('Formal Organisation') => drupal_map_assoc(
      array(
        t('Administrative level'),
        t('Alternative name'),
        t('Type'),
        t('Homepage')
        )
      ), 
      t('Legal Entity') => drupal_map_assoc(
      array()
      ), */
    t('Output') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        )
      ), 
/*   t('Addres') => drupal_map_assoc(
      array(
        t('Full Address'),
        t('Address ID'),
        t('Address Area'),
        t('Admin Unit L1'),
        t('Admin Unit L2'),
        t('Locator Designator'),
        t('Locator Name'),
        t('PO Box'),
        t('PO Code'),
        t('PO Name'),
        t('Thoroughfare'),
        
        )
      ),*/
);
    
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}
	