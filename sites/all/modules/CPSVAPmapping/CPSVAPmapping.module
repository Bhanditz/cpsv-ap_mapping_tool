<?php
//define menu
function CPSVAPmapping_menu() {

	$items['CPSVAPmappings'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('CPSVAPmapping_basic'),
		'access callback' => TRUE,
	);
	return $items;
}
//define main function
function CPSVAPmapping_basic($form, &$form_state) {

	$datamodel_list= CPSVAPmapping_basic_populate_list();
	$dropdown_array= CPSVAPmapping_basic_relations_list();
//specifying form and all it's fields

	$form = array();

	
	$form['#attached']['css'] = array(
		  	  drupal_get_path('module', 'CPSVAPmapping') . '/CPSVAPmapping.css',
	);
	
	//datamodel 2 select list
	$form['datamodellist2'] = array (
					'#title' => t('Choose a target datamodel or insert a new one'),
					'#type' => 'select',
					'#options' => $datamodel_list,
					'#default_value' => 'default',		
				);
	//wrapper
	$form['datamodel_fieldset2'] = array(
		 '#type' => 'fieldset',
	 	 '#title' => t('datamodel 2'),
	 	 '#prefix' => '<div id="datamodel-fieldset2">',
	 	 '#suffix' => '</div>',
	 	 );	  	 	 

	//fields to add new datamodel
			 $form['datamodel_fieldset2']['datamodel2'] = array (
		  	  		'#title' => t('Name of the second datamodel'),                                     
					'#type' => 'textfield',
					'#size' => '50',
					'#states' => array(
						'visible' => array(
						':input[name="datamodellist2"]' => array('value' => '0'),
							),
						),
					);
			 
			   $form['datamodel_fieldset2']['URI2'] = array (
							'#title' => t('URI'),
							'#type' => 'textfield',
							'#size' => '50',
							'#states' => array(
								'visible' => array(
								':input[name="datamodellist2"]' => array('value' => '0'),
									),
								),
							);
	   
	   //defining all the other fields
	   $form['#tree'] = TRUE;
	   $form['relations_fieldset'] = array(
	 	 '#type' => 'fieldset',
	 	 '#title' => t('CPSVAPmapping relations'),
	 	 '#prefix' => '<div id="relations-fieldset-wrapper">',
	 	 '#suffix' => '</div>',
	 	 );	
	 	
	   //dummmy invisible field for css purposes due to time/budget constraints (I know this is bad practice please don't judge me)
	   	$form['relations_fieldset']['labels']['dummylabelprobnotgoodpractice'] = array (
		  	  		'#markup' => '<h1> </h1>',
					);
		
		  $form['relations_fieldset']['labels']['source_class_label'] = array (
		  	  		'#markup' => '<h1>Source Class</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['source_property_label'] = array (
					'#markup' => '<h1>Source Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['relation_label'] = array (
					'#markup' => '<h1>Relation</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['target_property_label'] = array (
					'#markup' => '<h1>Target Property</h1>',
					);
			
		  $form['relations_fieldset']['labels']['target_class_label'] = array (
					'#markup' => '<h1>Target Class</h1>',
					);
		  
		
		  
		  $form['relations_fieldset']['labels']['target_property_label'] = array (
					'#markup' => '<h1>Target Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['syntax_CPSVAPmapping_label'] = array (
					'#markup' => '<h1>Syntax Mapping</h1>',
					);
	
		  if (empty($form_state['num_relations'])) {
		  	  $form_state['num_relations'] =1;
		  }
		 
		  //loop to define the dynamic number of relations- as more can be added on the fly
		  for ($i = 0; $i < $form_state['num_relations']; $i++) {

		  	  $chosen_class = CPSVAPmapping_get_class_chosen();
		  	  
		  	  $selected = isset($form_state['values']['relations_fieldset'][$i]['source_class']) ? $form_state['values']['relations_fieldset'][$i]['source_class'] : key($chosen_class);
		  	  $properties = CPSVAPmapping_get_properties_dropdown_options($selected);
		  	  
		  	   $form['relations_fieldset'][$i]['relationship_label'] = array (
		  	  		'#markup' => '<h2>Relationships:</h2>',
					);
			   
			   //field is dropdown populate from a list
				$form['relations_fieldset'][$i]['source_class'] = array (
					'#type' => 'select',
					'#options' => $chosen_class,
					'#default_value' => $selected,
					'#ajax' => array(
						'callback' => 'CPSVAPmapping_dependent_dropdown_callback',
						'wrapper' => 'relations-fieldset-wrapper',
						),
					);
				
				//field is dropdown populate from a list
				$form['relations_fieldset'][$i]['source_property'] = array (
					'#type' => 'select',
					'#prefix' => '<div id="dropdown-properties-replace">',
					'#suffix' => '</div>',
					'#options' => $properties,
					'#default_value' => isset($form_state['values']['relations_fieldset'][$i]['source_property']) ? $form_state['values']['relations_fieldset'][$i]['source_property'] : '',
					);
	
  
				$form['relations_fieldset'][$i]['relation'] = array (
					'#type' => 'select',
					'#options' => $dropdown_array,
					
					);
				
					$form['relations_fieldset'][$i]['target_property'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					);
					
				$form['relations_fieldset'][$i]['target_class'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					
					);	
				
				$form['relations_fieldset'][$i]['syntax_mapping'] = array (
					'#type' => 'checkbox',				
					);	
				
				$form['relations_fieldset'][$i]['uri_label'] = array (
		  	  		'#markup' => '<h2>URIs: </h2>',
					);
								
					$form['relations_fieldset'][$i]['source_class_URI'] = array (
					'#title_display'=> 'before',
					'#type' => 'textfield',
					'#size' => '10',
					'#attributes' => array('hidden' => 'hidden'),
				     
					);
				
				$form['relations_fieldset'][$i]['source_property_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#attributes' => array('hidden' => 'hidden'),
					
					);
								
				$form['relations_fieldset'][$i]['relation_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					 '#attributes' => array('hidden' => 'hidden'),
					);
				
				$form['relations_fieldset'][$i]['target_property_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#states' => array(
								'readonly' => array(
								':input[name="relations_fieldset['.$i.'][known_URI]"]' => array('checked' => FALSE),
									),
								),
					);
				$form['relations_fieldset'][$i]['target_class_URI'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					'#states' => array(
								'readonly' => array(
								':input[name="relations_fieldset['.$i.'][known_URI]"]' => array('checked' => FALSE),
									),
								),
					);
				
				
				
					
				$form['relations_fieldset'][$i]['labels']['known_uri'] = array (
		  	  		'#markup' => '<h3> only fill in the URIs if they are known </h3>',
				);
				
					$form['relations_fieldset'][$i]['line'] = array (
		  	  		'#markup' => '<div class="style1"></div>',
				);
			}
			//buttons to generate URI, add relations, remove relations and submit form
			$form['generate_uri'] = array(
				'#type' => 'submit',
				'#submit' => array('CPSVAPmapping_generate_uri'),
				'#value' => t('generate URIs'),
				
				'#ajax' => array(
					'event' => 'change', 
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['add_relation'] = array(
				'#type' => 'submit',
				'#value' => t('add relation'),
				'#submit' => array('CPSVAPmapping_add_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
				  	  	
  	  	  	$form['add_5_relations'] = array(
  	  	  		'#type' => 'submit',
  	  	  		'#value' => ('+5 relations'),
  	  	  		'#submit' => array('CPSVAPmapping_add_five'),
  	  	  		'#limit_validation_errors' => array(),
  	  	  		'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_relation'] = array(
				'#type' => 'submit',
				'#value' => ('remove relation'),
				'#submit' => array('CPSVAPmapping_remove_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_five_relations'] = array(
				'#type' => 'submit',
				'#value' => ('-5 relations'),
				'#submit' => array('CPSVAPmapping_remove_five'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'CPSVAPmapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
  	  	  	
		   $form['submit'] = array(
			 '#type' => 'submit',
			 '#value' => t('Submit'),		
			 '#attributes' => array('onclick' => 'if(!confirm("are you sure you want to submit the mapping?")){return false;}')
			
			
			 );
		   
	return $form;
	
}

//add relations
function CPSVAPmapping_add_one($form, &$form_state) {
	$form_state['num_relations']++;
	$form_state['rebuild'] = TRUE;
	
}
//add 5 relations
function CPSVAPmapping_add_five($form,&$form_state) {
	$form_state['num_relations'] += 5;
	$form_state['rebuild'] = TRUE;
}

	//remove relations
function CPSVAPmapping_remove_one($form, &$form_state) {
	if($form_state['num_relations'] > 1){
		$form_state['num_relations']--;
		$form_state['rebuild'] = TRUE;
	}
}
	//remove 5 relations
function CPSVAPmapping_remove_five($form, &$form_state) {
	if($form_state['num_relations'] > 5){
		$form_state['num_relations']-=5;
		$form_state['rebuild'] = TRUE;
	}
}

//fucntion to generate uri's when the field is empty
function CPSVAPmapping_generate_uri($form, &$form_state ){

	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	
		//if it's a new data model get the URI otherwise if it exists get it from that database via db_query.
	if($select2== "add new") {
		$datamodel2=$form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['datamodel2'];
		$datamodelURI2= $form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2'];
	}
	else {
		$datamodel2=$select2;
		$result2 = db_query('SELECT uri FROM datamodels WHERE name= :datamodel2', array(':datamodel2' => $datamodel2));
		$datamodelURI2= $result2->fetchField(0);
		
	}
	$root = (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . '/';

//generate URI for each field if it's empty. URI's are generated by using the URI of the data model + the label of the class & property
	for($i = 0; $i < $form_state['num_relations']; $i++){
				
		$relation_choice= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']];
		
		if($relation_choice=='Exact match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:exactMatch';
		if($relation_choice=='Close match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:closeMatch';
		if($relation_choice=='Narrow match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:narrowMatch';
		if($relation_choice=='Broad match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:broadMatch';
		if($relation_choice=='Related match')
			$form_state['input']['relations_fieldset'][$i]['relation_URI']='skos:relatedMatch';
		
		$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['target_class']);
		$testempty2 = trim($form_state['values']['relations_fieldset'][$i]['target_class_URI']);
	
		if(!empty($testempty1)&& empty($testempty2)){
		$targetclassUri = $datamodelURI2.'/class/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['target_class']);
		unset($form_state['input']['relations_fieldset'][$i]['target_class_URI']);
	
		$form_state['input']['relations_fieldset'][$i]['target_class_URI'] = $targetclassUri;	
		}
		
		$testempty1 = trim($form_state['values']['relations_fieldset'][$i]['target_property']);
		$testempty2 = trim($form_state['values']['relations_fieldset'][$i]['target_property_URI']);
		
		if(!empty($testempty1)&& empty($testempty2)) {
		$targetpropertyUri = $datamodelURI2.'/class/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['target_class']).'/property/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['target_property']);
		unset($form_state['input']['relations_fieldset'][$i]['target_property_URI']);

		$form_state['input']['relations_fieldset'][$i]['target_property_URI'] = $targetpropertyUri;	
		}			
	
	}
		//update the form
	$form_state['rebuild']= TRUE;

	return form_builder('form-wrapper', $form['relations_fieldset'], $form_state);
}

//force update
function CPSVAPmapping_add_more_callback($form, $form_state) {

  return $form['relations_fieldset'];
}	

//validate input, check if everything is filled
function CPSVAPmapping_basic_validate($form, &$form_state){
	$foo = FALSE;
 
	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
     
	$testempty1 = trim($form_state['values']['datamodel_fieldset2']['datamodel2']);
	$testempty2 = trim($form_state['values']['datamodel_fieldset2']['URI2']);
 		
	if($select2== "add new"){
		if(empty($testempty1)){
			form_set_error('postal', t('target datamodel name is required.'));
			$foo= TRUE;
		 }
		  
		if(empty($testempty2)){
			form_set_error('postal', t('target datamodel uri is required.'));
			$foo= TRUE;
		  }
	}

	for($i = 0; $i < $form_state['num_relations']; $i++){
		
		  $testempty4=  trim($form_state['values']['relations_fieldset'][$i]['relation']);
		  $testempty5 = trim($form_state['values']['relations_fieldset'][$i]['target_class']);
		  $testempty6 = $form_state['complete form']['relations_fieldset'][$i]['source_property']['#options'][$form_state['values']['relations_fieldset'][$i]['source_property']];	
		  $testempty7 = trim($form_state['values']['relations_fieldset'][$i]['target_property']);
  		
		if(empty($testempty4)) {
			 form_set_error('postal', t('The relation is required.'));
			 $foo= TRUE;
		}
	 
		if(empty($testempty5)) {
			 form_set_error('postal', t('The target class is required.'));
			 $foo= TRUE;
		}
		
		if($testempty6 != "" && empty($testempty7)){
			 form_set_error('postal', t('The target property is required.'));
			 $foo= TRUE;
		}
		
		if($testempty6 == "" && !empty($testempty7)){
			 form_set_error('postal', t('The source property is required.'));
			 $foo= TRUE;
		}
    
  	 }
  if($foo==TRUE){
  	 return;
  }
  
}
//submit form 
function CPSVAPmapping_basic_submit($form, &$form_state) {
	
	$root = (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . '/';
	//URI and datamodel CPSV-AP
	$datamodel1='CPSV-AP';
	$datamodelURI1= 'https://joinup.ec.europa.eu/asset/cpsv-ap/description';
		
	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	//if new data model, save it in database
	if($select2== "add new") {
		$datamodel2=$form_state['values']['datamodel_fieldset2']['datamodel2'];
		$datamodelURI2= $form_state['values']['datamodel_fieldset2']['URI2'];
	}
	else {
		$datamodel2=$select2;
		$result2 = db_query('SELECT uri FROM datamodels WHERE name= :datamodel2', array(':datamodel2' => $datamodel2));
		$datamodelURI2= $result2->fetchField(0);
	}
	
    if($select2 =='add new') {
    	db_insert('datamodels')
    	->fields(array(
    		'name' =>$form_state['values']['datamodel_fieldset2']['datamodel2'],
    		'uri' =>$form_state['values']['datamodel_fieldset2']['URI2'],
    	))->execute();
    }
    
    
	//get uri's of the classes and properties from file
	$dir = getcwd ();
	$datafile = file_get_contents($dir.'/sites/all/modules/CPSVAPmapping/uri.txt');
	$uriLines = explode (";" , $datafile);
	  
   foreach($uriLines as $row) {
   	   list($k,$v) = explode("|",$row);
   	   $k = preg_replace('/\s+/', '', trim(strtolower($k)));
   	   $datamodeluris[$k]= $v;
	}
	
        //loop over all the relations
 for($i = 0; $i < $form_state['num_relations']; $i++){
 	 
 
  if(!empty($form['relations_fieldset'][$i]['source_class'])) {
 	
  	$relation_choice= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']]; 	 
  	$sourceclass= $form_state['complete form']['relations_fieldset'][$i]['source_class']['#options'][$form_state['values']['relations_fieldset'][$i]['source_class']];
  	$sourceclasslabel = preg_replace('/\s+/', '', trim(strtolower($sourceclass)));
 	$sourceclassuri = $datamodeluris[$sourceclasslabel];
 	
 	if($sourceclassuri =='')
		$sourceclassuri = $datamodelURI1.'/property/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['source_class']);
	
	
	
 	$sourceproperty= $form_state['complete form']['relations_fieldset'][$i]['source_property']['#options'][$form_state['values']['relations_fieldset'][$i]['source_property']];	
 	
 	if($sourceproperty != '') {
 		$sourcepropertylabel = preg_replace('/\s+/', '', trim(strtolower($sourceproperty)));
 		$sourcepropertyuri =$datamodeluris[$sourceclasslabel.$sourcepropertylabel];
 		
 		if($sourcepropertyuri ==''){
			$sourcepropertyuri = $datamodelURI1.'/property/'.str_replace(' ','',$form_state['values']['relations_fieldset'][$i]['source_property']);
		}
 	}
 	
	
	
	$relation= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']];
	if($relation_choice=='Exact match')
		$relationuri='skos:exactMatch';
	if($relation_choice=='Close match')
		$relationuri='skos:closeMatch';
	if($relation_choice=='Narrow match')
		$relationuri='skos:narrowMatch';
	if($relation_choice=='Broad match')
		$relationuri='skos:broadMatch';
	if($relation_choice=='Related match')
		$relationuri='skos:relatedMatch';
	
	$targetclass= $form_state['values']['relations_fieldset'][$i]['target_class'];
	$targetclassuri= $form_state['values']['relations_fieldset'][$i]['target_class_URI'];
	$targetproperty= $form_state['values']['relations_fieldset'][$i]['target_property'];
	
	if($targetproperty !='') {
		$targetpropertyuri= $form_state['values']['relations_fieldset'][$i]['target_property_URI'];
	}
	
	$synmap= $form_state['values']['relations_fieldset'][$i]['syntax_mapping'];
	//store them in database
	db_insert('relations')
    ->fields(array(
      'did1' => $datamodel1,
      'did2' => $datamodel2,
      'coreclass' =>$sourceclass, 
      'coreclassuri' => $sourceclassuri,
      'coreproperty' =>$sourceproperty,
      'corepropertyuri' =>$sourcepropertyuri,
      'relation' =>$relation,
      'relationuri' =>$relationuri,
      'mappedclass' =>$targetclass,
      'mappedclassuri' =>$targetclassuri,
      'mappedproperty' =>  $targetproperty,
      'mappedpropertyuri' =>  $targetpropertyuri,
      'synmap' =>$synmap,
      ))->execute();
    }
    else {
    	drupal_set_message('CPSVAPmapping relations are not filled in correctly');
    }
 
  $datamodelURI1	= preg_replace('/\s+/', '', $datamodelURI1);
  $datamodelURI2	= preg_replace('/\s+/', '', $datamodelURI2);
  $sourcepropertyuri= preg_replace('/\s+/', '', $sourcepropertyuri);
  $targetpropertyuri= preg_replace('/\s+/', '', $targetpropertyuri);
  $sourceclassuri	= preg_replace('/\s+/', '', $sourceclassuri);
  $targetclassuri	= preg_replace('/\s+/', '', $targetclassuri); 		
      
  
  //store stuff in triplestore with easyrdf

 	if(easyrdf()){
 		//the $endpoint should point to the correct address
		$endpoint= 'http://52.50.205.146/sparql-graph-crud';
 		$gs = new EasyRdf_GraphStore($endpoint);
 		$graph1 = new EasyRdf_Graph();
 		//datamodel definition
 		$graph1->addResource('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		$graph1->addResource('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2004/02/skos/core#Concept');
 		$graph1->add('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/2000/01/rdf-schema#label', "Core Data Model");
 		$graph1->add('http://mapping.semic.eu/def#DataModel', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', "reusable data models that are defined, managed, promoted and maintained centrally to facilitate interoperability across different systems, applications and domains");

 		//datamodel, classes & properties
 		$graph1->addResource($datamodelURI1, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://mapping.semic.eu/def#DataModel');
 		$graph1->addResource($datamodelURI2, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://mapping.semic.eu/def#DataModel');
 		if($sourcepropertyuri!=''){
 			$graph1->addResource($sourcepropertyuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		}
 		if($targetpropertyuri!=''){
 			$graph1->addResource($targetpropertyuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		}

 		$graph1->addResource($sourceclassuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		$graph1->addResource($targetclassuri, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');	
 		//ispartof
 		$graph1->addResource($sourceclassuri, 'http://purl.org/dc/terms/isPartOf', $datamodelURI1);
 		$graph1->addResource($targetclassuri, 'http://purl.org/dc/terms/isPartOf', $datamodelURI2);

 		if($sourcepropertyuri =='' && $targetpropertyuri ==''){   

 			$graph1->addResource($sourceclassuri,$relationuri, $targetclassuri); 

 		}
 		else{
 			drupal_set_message($sourcepropertyuri." or ".$targetpropertyuri);
 			$graph1->addResource($sourcepropertyuri, 'http://purl.org/dc/terms/isPartOf', $sourceclassuri);
 			$graph1->addResource($targetpropertyuri, 'http://purl.org/dc/terms/isPartOf', $targetclassuri);
 			$graph1->addResource($sourcepropertyuri,$relationuri, $targetpropertyuri); 
 		}

 		$gs->insert($graph1, 'http://cpsv-ap_mapping.eu');
 		}
	}
	
 		drupal_set_message("CPSV-AP Mapping has been submitted");
}
//populate list of datamodels

function CPSVAPmapping_basic_populate_list(){
	$databaselist= db_query('SELECT mid,name FROM datamodels') ;

	$options= array('0' => 'add new');
   	 	foreach ($databaselist as $item) {
		  	$key = $item->mid;
		  	$value = $item->name;
		  	$options[$key] = $value;
		  }
    return $options;
}

//populate list of relations		  
function CPSVAPmapping_basic_relations_list() {
	$voc_name = 'Skos_mappingRelation';
	$myvoc = taxonomy_vocabulary_machine_name_load($voc_name);
		  
	$dropdown_source = taxonomy_get_tree($myvoc->vid);
	
	$dropdown_list = array('0' => '---none---');
		  
		  foreach ($dropdown_source as $item) {
		  	  $key = $item->tid;
		  	  $value = $item->name;
		  	  $dropdown_list[$key] = $value;
		  }
		  
	return $dropdown_list;
}

//populate list of CPSV-AP classes
function CPSVAPmapping_basic_classes_list(){
	$classes_name = 'Classes';
	$myclasses = taxonomy_vocabulary_machine_name_load($classes_name);
		  
	$classes_source = taxonomy_get_tree($myclasses->vid);
	
	$classes_list = array('0' => '---none---');
		  
		  foreach ($classes_source as $item) {
		  	  $key = $item->tid;
		  	  $value = $item->name;
		  	  $classes_list[$key] = $value;
		  }              
		  
	return $classes_list;
}
//populate list of CPSV-AP properties
function CPSVAPmapping_basic_properties_list($vocabulary){

	
	$classes = taxonomy_get_tree($vocabulary);

  foreach ($classes as $data) {
    $output[$data->tid] = $data->name;
  }
  
  return $output;
}
		
function CPSVAPmapping_dependent_dropdown_callback($form, $form_state) {
  
  return $form['relations_fieldset'] ;
  
}

//classes & properties
function CPSVAPmapping_get_class_chosen() {
  return drupal_map_assoc(
    array(
		t('Public Service'),
		t('Business Event'),
		t('Life Event'),
		t('Participation'),
		t('CriterionRequirement'),
		t('Evidence'),
		t('Output'),
		t('Cost'),
		t('Channel'),
		t('Opening Hours Specification'),
		t('Rule'),
		t('Formal Framework'),
		t('Agent'),
		t('Contact Point'),
		t('Public Organization'),
    )
  );
 }

function CPSVAPmapping_get_properties_dropdown_options($key = '') {
  $options = array(
    t('Public Service') => drupal_map_assoc(
      array(
      	t(''),
      	t('Identifier'),
        t('Name'),
        t('Description'),
        t('Keyword'),
        t('Language'),
       	t('Processing Time'),
        t('Sector'),
        t('Type'),
        t('Status'),
        t('Spatial'),
        t('Is Grouped By'),
        t('Requires'),
        t('Related'),
        t('Has Criterion'),
        t('Has Competent Authority'),
        t('Has Contact Point'),
        t('Has Channel'),
        t('Service Provider'),
        t('Has Participation'),
        t('Has Input'),
        t('Has Formal Framework'),
        t('Produces'),
        t('Follows'),
        t('Has Cost'), 
      )
    ),
    t('Business Event') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        t('Related Service'),
      )
    ),
    t('Life Event') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        t('Related Service'),
      )
    ),
    t('Participation') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Description'),
        t('Role'),
      )
    ),
    t('CriterionRequirement') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Type'),
      )
    ),
    t('Evidence') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        t('Related Documentation'),
        t('Language'),
      )
    ),
     t('Output') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Type'),
        )
      ),
     t('Cost') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),      
        t('Value'),
        t('Currency'),
        t('Description'),
        t('Is Defined By'),
        t('if Accessed Through'),
        )
      ), 
      t('Channel') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Owned By'),
        t('Type'),
        t('Has Input'),
        t('Opening Hours'),
        t('availability restriction'),
        )
      ), 
      t('Opening Hours Specification') => drupal_map_assoc(
      array(
       t(''),
       t('Identifier'),
       t('opens'),
       t('closes'),
       t('dayOfWeek'),
       t('validFrom'),
       t('validThrough'),
      )
      ),
      t('Rule') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Description'),
        t('Language'),
        t('Name'),
        t('Implements'),
        )
      ),
    t('Formal Framework') => drupal_map_assoc(
      array(
      	t(''),
        t('Identifier'),
        t('Name'),
        t('Description'),
        t('Language'),
        t('Status'),
        t('Subject'),
        t('Territorial Application'),
        t('Type'),
        t('Related'),
        )
      ), 
    t('Agent') => drupal_map_assoc(
      array(
      	t(''),
        t('Name'),
        t('Identifier'),
        t('Type'),
        t('Plays Role'),
        t('Has Address'),
      )
    ),
    
    t('Public Organization') => drupal_map_assoc(
      array(
      	t(''),
       	t('Identifier'),
      	t('Preferred Label'),
        t('spatial'), 	
        )
      ), 
    t('Contact Point') => drupal_map_assoc(
      array(
      	t(''),
        t('has email'),
        t('has telephone'),
        t('opening hours'),
        t('availability restriction'),
      )
    ),
);
    
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

	